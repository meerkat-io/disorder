package generator

import (
	"strings"
	"text/template"

	"github.com/meerkat-lib/disorder/internal/utils/strcase"
)

func NewGoGenerator() Generator {
	return newGeneratorImpl(&goLanguage{})
}

type goLanguage struct {
	template *template.Template
}

func (g *goLanguage) packageFolder(packageName string) string {
	folders := strings.Split(packageName, ".")
	for i := range folders {
		folders[i] = strcase.SnakeCase(folders[i])
	}
	return strings.Join(folders, "/")
}

func (g *goLanguage) getTemplate() *template.Template {
	if g.template == nil {
		tpl := `// Package {{.PackageName "go"}} is auto generated by https://github.com/meerkat-lib/house/order; DO NOT EDIT.
package {{.PackageName "go"}}
{{- range $index, $enumeration := .Enumerations}}
// {{PascalCase $enumeration.Name}} enumeration
type {{PascalCase $enumeration.Name}} string
// {{PascalCase $enumeration.Name}} enumeration list
const(
{{- range .Values}}
	{{PascalCase $enumeration.Name}}{{PascalCase .}} {{PascalCase $enumeration.Name}} = "{{.}}"
{{- end}}
)
{{- end}}
{{- range .Messages}}
// {{PascalCase .Name}} [auto generated struct]
type {{PascalCase .Name}} struct {
	{{- if .Mongodb}}
	mongo.Document ` + "`bson:\",inline\"`" + `
	{{end}}
	{{- range .Elements}}
	{{PascalCase .Name}}	{{if eq .Container "array"}}[]{{end}}{{if eq .Container "map"}}map[string]{{end}}{{if .IsComplexType}}*{{end}}{{Type .GetType}}` +
			"`json:\"{{.Name}}\"{{if $mongo}} bson:\"{{.Name}}{{if or .IsComplexType .IsArrayOrMap}},omitempty{{end}}\"{{end}}`" + `{{- end}}
}
{{- end}}`
		c := caseConversion()
		//c["Type"] = Type
		g.template = template.New("go").Funcs(c)
		template.Must(g.template.Parse(tpl))
	}
	return g.template
}
