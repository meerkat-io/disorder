// Code generated by https://github.com/meerkat-lib/disorder; DO NOT EDIT.
package test

import (
	"fmt"
	"github.com/meerkat-lib/disorder"
	"github.com/meerkat-lib/disorder/internal/test_data/test/sub"
	"github.com/meerkat-lib/disorder/rpc"
	"github.com/meerkat-lib/disorder/rpc/code"
)

type primaryServiceHandler func(*rpc.Context, *disorder.Decoder) (interface{}, *rpc.Error)

type PrimaryService interface {
	GetAnotherObject(*rpc.Context, string) (*AnotherObject, *rpc.Error)
	PrintSubObject(*rpc.Context, *sub.SubObject) (int32, *rpc.Error)
}

func NewPrimaryServiceClient(client *rpc.Client) PrimaryService {
	return &primaryServiceClient{
		name:   "primary_service",
		client: client,
	}
}

type primaryServiceClient struct {
	name   string
	client *rpc.Client
}

func (c *primaryServiceClient) GetAnotherObject(context *rpc.Context, request string) (*AnotherObject, *rpc.Error) {
	var response *AnotherObject = &AnotherObject{}
	err := c.client.Send(context, c.name, "get_another_object", request, response)
	return response, err
}

func (c *primaryServiceClient) PrintSubObject(context *rpc.Context, request *sub.SubObject) (int32, *rpc.Error) {
	var response int32
	err := c.client.Send(context, c.name, "print_sub_object", request, &response)
	return response, err
}

type primaryServiceServer struct {
	name    string
	service PrimaryService
	methods map[string]primaryServiceHandler
}

func RegisterPrimaryServiceServer(s *rpc.Server, service PrimaryService) {
	server := &primaryServiceServer{
		name:    "primary_service",
		service: service,
	}
	server.methods = map[string]primaryServiceHandler{
		"get_another_object": server.getAnotherObject,
		"print_sub_object":   server.printSubObject,
	}
	s.RegisterService("primary_service", server)
}

func (s *primaryServiceServer) Handle(context *rpc.Context, method string, d *disorder.Decoder) (interface{}, *rpc.Error) {
	handler, ok := s.methods[method]
	if ok {
		return handler(context, d)
	}
	return nil, &rpc.Error{
		Code:  code.Unimplemented,
		Error: fmt.Errorf("Unimplemented method \"%s\" under service \"%s\"", method, s.name),
	}
}

func (s *primaryServiceServer) getAnotherObject(context *rpc.Context, d *disorder.Decoder) (interface{}, *rpc.Error) {
	var request string
	err := d.Decode(&request)
	if err != nil {
		return nil, &rpc.Error{
			Code:  code.InvalidRequest,
			Error: err,
		}
	}
	response, rpcErr := s.service.GetAnotherObject(context, request)
	if rpcErr != nil {
		return nil, rpcErr
	}
	return response, nil
}

func (s *primaryServiceServer) printSubObject(context *rpc.Context, d *disorder.Decoder) (interface{}, *rpc.Error) {
	var request *sub.SubObject
	err := d.Decode(request)
	if err != nil {
		return nil, &rpc.Error{
			Code:  code.InvalidRequest,
			Error: err,
		}
	}
	response, rpcErr := s.service.PrintSubObject(context, request)
	if rpcErr != nil {
		return nil, rpcErr
	}
	return response, nil
}
