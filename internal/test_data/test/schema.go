// Code generated by https://github.com/meerkat-io/disorder; DO NOT EDIT.
package test

import (
	"fmt"
	"github.com/meerkat-io/disorder/internal/test_data/test/sub"
	"time"
)

type Color string

const (
	ColorRed   = Color("red")
	ColorGreen = Color("green")
	ColorBlue  = Color("blue")
)

var colorEnumMap = map[string]Color{
	"red":   ColorRed,
	"green": ColorGreen,
	"blue":  ColorBlue,
}

func (*Color) Enum() {}

func (enum *Color) Decode(value string) error {
	if color, ok := colorEnumMap[value]; ok {
		*enum = color
		return nil
	}
	return fmt.Errorf("invalid enum value")
}

func (enum *Color) Encode() ([]byte, error) {
	if _, ok := colorEnumMap[string(*enum)]; ok {
		return []byte(*enum), nil
	}
	return nil, fmt.Errorf("invalid enum value")
}

type Object struct {
	IntField    int32                     `disorder:"int_field" json:"int_field"`
	StringField string                    `disorder:"string_field" json:"string_field"`
	EnumField   *Color                    `disorder:"enum_field" json:"enum_field"`
	IntMap      map[string]int32          `disorder:"int_map" json:"int_map"`
	ObjArray    []*sub.SubObject          `disorder:"obj_array" json:"obj_array"`
	ObjMap      map[string]*sub.SubObject `disorder:"obj_map" json:"obj_map"`
	EmptyArray  []int32                   `disorder:"empty_array" json:"empty_array"`
	EmptyMap    map[string]int32          `disorder:"empty_map" json:"empty_map"`
	IntArray    []int32                   `disorder:"int_array" json:"int_array"`
	Time        *time.Time                `disorder:"time" json:"time"`
	EmptyObj    *sub.SubObject            `disorder:"empty_obj" json:"empty_obj"`
	EmptyTime   *time.Time                `disorder:"empty_time" json:"empty_time"`
	EmptyEnum   *Color                    `disorder:"empty_enum" json:"empty_enum"`
}
